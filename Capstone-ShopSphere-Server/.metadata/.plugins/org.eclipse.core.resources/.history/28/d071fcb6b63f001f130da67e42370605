package com.cogent.main;

import java.io.File;

import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.data.RepositoryItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;

import lombok.RequiredArgsConstructor;

@Configuration
@RequiredArgsConstructor
public class SpringBatchConfig {
	private final ProductRepository productRepository;
	
	@Bean
	@StepScope
	public FlatFileItemReader<ProductEntity> itemReader() {
		FlatFileItemReader<ProductEntity> flatFileItemReader = new FlatFileItemReader<ProductEntity>();
		flatFileItemReader.setResource(new FileSystemResource(new File("src/main/resources/products.csv")));
		flatFileItemReader.setName("CSV-Reader");
		flatFileItemReader.setLinesToSkip(1);
		flatFileItemReader.setLineMapper(lineMapper());
		return flatFileItemReader;
	}
	
	LineMapper<ProductEntity> lineMapper() {
		DefaultLineMapper<ProductEntity> lineMapper = new DefaultLineMapper<ProductEntity>();
		DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();
		lineTokenizer.setDelimiter(",");
		lineTokenizer.setStrict(false);
		lineTokenizer.setNames("id","name","price","category","imageUrl","description");
		
		BeanWrapperFieldSetMapper<ProductEntity> fieldSetMapper = new BeanWrapperFieldSetMapper<ProductEntity>();
		fieldSetMapper.setTargetType(ProductEntity.class);
		
		lineMapper.setFieldSetMapper(fieldSetMapper);
		lineMapper.setLineTokenizer(lineTokenizer);
		return lineMapper;
	}
	
	@Bean
	public ProductProcessor processor() {
		return new ProductProcessor();
	}
	
	@Bean
	public RepositoryItemWriter<ProductEntity> writer() {
		RepositoryItemWriter<ProductEntity> writer = new RepositoryItemWriter<ProductEntity>();
		writer.setRepository(productRepository);
		writer.setMethodName("save");
		return writer;
	}
	
	public Step step(ItemReader<ProductEntity> reader,
			ItemProcessor<ProductEntity, ProductEntity> processor,
			ItemWriter<ProductEntity> wri)
}
